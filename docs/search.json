[{"path":"https://mkarikom.github.io/DURIAN/OLD.README.html","id":null,"dir":"","previous_headings":"","what":"DURIAN ","title":"DURIAN ","text":"DURIAN (Deconvolution mUltitask-Regression-based ImputAtioN) hybrid, iterative method imputation drop-single-cell expression data. Automatic recovery missing single-cell reads supervised deconvoluted bulk expression data.","code":""},{"path":"https://mkarikom.github.io/DURIAN/OLD.README.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DURIAN ","text":"Install pipeline example data GitHub.","code":"# Install the latest version from github library(devtools) install_github(\"mkarikom/DURIAN\")"},{"path":"https://mkarikom.github.io/DURIAN/OLD.README.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"DURIAN ","text":"Check basic usage DURIAN running visualizing imputation Human single-cell data vignette(\"basic_usage\").","code":""},{"path":"https://mkarikom.github.io/DURIAN/OLD.README.html","id":"module-selection","dir":"","previous_headings":"","what":"Module Selection","title":"DURIAN ","text":"DURIAN supports integration custom deconvolution modules, even modules written languages, Julia. Current deconvolution alternatives include: fast, NNLS regression using MuSiC (R) distributed Monte Carlo inference using dsLDA (Julia)","code":""},{"path":"https://mkarikom.github.io/DURIAN/articles/basic_usage.html","id":"load-the-package-and-data","dir":"Articles","previous_headings":"","what":"Load the package and data","title":"Basic Usage","text":"","code":"library(DURIAN) data(c(\"C\",\"B\",\"pDataC\")) set.seed(42)"},{"path":"https://mkarikom.github.io/DURIAN/articles/basic_usage.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"Basic Usage","text":"","code":"comgenes = intersect(rownames(C),rownames(B)) C = DURIAN::subsetsc(scremoutlier(C),geneids=comgenes,return_obj=TRUE,nsd=3) pDataC = pDataC[colnames(C),]"},{"path":"https://mkarikom.github.io/DURIAN/articles/basic_usage.html","id":"run-imputation-on-the-single-cell-data-using-the-bulk-data-for-supervision-","dir":"Articles","previous_headings":"","what":"Run imputation on the single-cell data, using the bulk data for supervision.","title":"Basic Usage","text":"","code":"impresult_list=run_durian(       scrabble_parameters = c(1,1e-6,1e-4),       nEM = 5,       scdata = C,       metadata = pDataC,       bulkdata = B,       deconv_method = \"MuSiC\",       nIter_outer = 10,       nIter_inner = 10,       nSDCIters = 500000,       DECONVGENETHRESH=-0.01,       SCRGENETHRESH=-0.01,       outerStats = FALSE,       durianEps=1e-3,       saveImputationLog = FALSE,       saveDeconvolutionLog = FALSE,       saveImputedStep=FALSE)   impresult = impresult_list[[\"C\"]]"},{"path":"https://mkarikom.github.io/DURIAN/articles/basic_usage.html","id":"construct-a-low-dimensional-umap-embedding-from-imputed-and-original-data","dir":"Articles","previous_headings":"","what":"Construct a low-dimensional UMAP embedding from imputed and original data","title":"Basic Usage","text":"","code":"library(umap) library(ggplot2) library(reshape2) umap_imputed = umap(t(impresult)) umap_orig = umap(t(as.matrix(C))) imputed_df = cbind(umap_imputed$layout,pDataC) imputed_df$status = \"Imputed\" orig_df = cbind(umap_orig$layout,pDataC) orig_df$status = \"Unimputed\" df = rbind(imputed_df,orig_df) colnames(df) = c(\"UMAP1\",\"UMAP2\",\"cellID\",\"cellType\",\"sampleID\",\"status\") df$status = factor(df$status,levels=c(\"Unimputed\",\"Imputed\"))"},{"path":"https://mkarikom.github.io/DURIAN/articles/basic_usage.html","id":"plot-the-original-and-imputed-data","dir":"Articles","previous_headings":"","what":"Plot the original and imputed data","title":"Basic Usage","text":"","code":"ggplot(df,aes(x=UMAP1, y=UMAP2,color=cellType)) +        geom_point(size=1)+       facet_grid(~status,scales=\"free\") + theme_bw()"},{"path":"https://mkarikom.github.io/DURIAN/articles/module_selection.html","id":"load-the-package-and-data","dir":"Articles","previous_headings":"","what":"Load the package and data","title":"Module Selection","text":"run DURIAN two different deconvolution modules: LDA-based topic model NNLS-based regression. select random subset 1000 genes present bulk single-cell data, well subset 5 patients original 20, speed example.","code":"library(DURIAN)"},{"path":"https://mkarikom.github.io/DURIAN/articles/module_selection.html","id":"preprocess-the-data","dir":"Articles","previous_headings":"","what":"Preprocess the data","title":"Module Selection","text":"Run imputation using dsLDA deconvolution (julia). ##### Run imputation single-cell data, using bulk data supervision. Run imputation using MuSiC deconvolution (R). Note: default, mtSCRABBLE backend DURIAN imputation (regardless deconvolution module) calls irlba::irlba() speed computing matrix norms DURIAN objective. Currently, irlba gracefully handle case randomly chosen starting singular vector close null space. corresponding error encountered ##### Run imputation single-cell data, using bulk data supervision.","code":"set.seed(42) B.sub = B[,1:5] C.sub = as.data.frame(C %>% sample_n(1000)) comgenes = intersect(rownames(C.sub),rownames(B.sub)) C.sub = DURIAN::subsetsc(scremoutlier(C.sub),geneids=comgenes,return_obj=TRUE,nsd=3) B.sub = B.sub[comgenes,] pDataC.sub = pDataC[colnames(C.sub),] library(JuliaCall) julia_library(\"DistributedStwdLDA\") julia_library(\"Distributed\") julia_call(\"procsN\",as.integer(ncol(B.sub)+1)) julia_command(\"@everywhere using DistributedStwdLDA\")  impresult_list_lda=run_durian(       scrabble_parameters = c(1,1e-6,1e-4),       nEM = 5,       scdata = C.sub,       metadata = pDataC.sub,       bulkdata = B.sub,       deconv_method = \"dsLDA\",       MCNITER = as.integer(2000),       MINCELLSTOPICCORP=as.integer(1),       MCNPARTITIONS=ncol(B.sub),       MCNCHAINS=as.integer(1),       MCTHINNING=as.integer(1),       MCBURNRATE=0.5,       LDASCALEBLK=\"lognorm\",       LDASCALESC=\"column\",       LDASCALEFACBLK=10000,       nIter_outer = 10,       nIter_inner = 10,       nSDCIters = 500000,       DECONVGENETHRESH=-0.01,       SCRGENETHRESH=-0.01,       outerStats = FALSE,       durianEps=1e-3,       saveImputationLog = FALSE,       saveDeconvolutionLog = FALSE,       saveImputedStep=FALSE)   impresult_lda = impresult_list_lda[[\"C\"]] impresult_list=run_durian(       scrabble_parameters = c(1,1e-6,1e-4),       nEM = 1,       scdata = C.sub,       metadata = pDataC.sub,       bulkdata = B.sub,       deconv_method = \"MuSiC\",       nIter_outer = 10,       nIter_inner = 10,       nSDCIters = 500000,       DECONVGENETHRESH=-0.01,       SCRGENETHRESH=-0.01,       outerStats = FALSE,       durianEps=1e-3,       saveImputationLog = FALSE,       saveDeconvolutionLog = FALSE,       saveImputedStep=FALSE)   impresult = impresult_list[[\"C\"]]"},{"path":"https://mkarikom.github.io/DURIAN/articles/module_selection.html","id":"construct-a-low-dimensional-umap-embedding-from-imputed-and-original-data","dir":"Articles","previous_headings":"","what":"Construct a low-dimensional UMAP embedding from imputed and original data","title":"Module Selection","text":"","code":"library(umap) library(ggplot2) library(reshape2) common_cells = base::intersect(base::intersect(colnames(impresult_lda),colnames(impresult)),colnames(C)) umap_imputed_lda = umap(t(impresult_lda[,common_cells]),preserve.seed=TRUE) umap_imputed = umap(t(impresult[,common_cells]),preserve.seed=TRUE) umap_orig = umap(t(as.matrix(C[,common_cells])),preserve.seed=TRUE) imputed_df_lda = cbind(umap_imputed_lda$layout,pDataC.sub[common_cells,]) imputed_df_lda$status = \"Imputed [LDA deconv.]\" imputed_df = cbind(umap_imputed$layout,pDataC.sub[common_cells,]) imputed_df$status = \"Imputed [W-NNLS deconv.]\" orig_df = cbind(umap_orig$layout,pDataC.sub[common_cells,]) orig_df$status = \"Unimputed\" df = rbind(imputed_df,imputed_df_lda,orig_df) colnames(df) = c(\"UMAP1\",\"UMAP2\",\"cellID\",\"cellType\",\"sampleID\",\"status\") df$status = factor(df$status,levels=c(\"Imputed [W-NNLS deconv.]\",\"Imputed [LDA deconv.]\", \"Unimputed\"))"},{"path":"https://mkarikom.github.io/DURIAN/articles/module_selection.html","id":"plot-the-original-and-imputed-data","dir":"Articles","previous_headings":"","what":"Plot the original and imputed data","title":"Module Selection","text":"","code":"ggplot(df,aes(x=UMAP1, y=UMAP2,color=cellType)) +        geom_point(size=1)+       facet_grid(~status,scales=\"free\") + theme_bw()"},{"path":"https://mkarikom.github.io/DURIAN/articles/signaling.html","id":"load-the-package-and-data","dir":"Articles","previous_headings":"","what":"Load the package and data","title":"Imputation/Signaling from Seurat Output","text":"","code":"library(DURIAN) data(c(\"C\",\"B\",\"pDataC\"))"},{"path":[]},{"path":"https://mkarikom.github.io/DURIAN/articles/signaling.html","id":"run-imputation-on-the-single-cell-data-using-the-bulk-data-for-supervision-","dir":"Articles","previous_headings":"","what":"Run imputation on the single-cell data, using the bulk data for supervision.","title":"Imputation/Signaling from Seurat Output","text":"","code":"seur=run_durian(       scrabble_parameters = c(1,1e-6,1e-4),       nEM = 5,       seur = seur,       bulkdata = B,       deconv_method = \"MuSiC\",       nIter_outer = 10,       nIter_inner = 10,       nSDCIters = 500000,       DECONVGENETHRESH=-0.01,       SCRGENETHRESH=-0.01,       outerStats = FALSE,       durianEps=1e-3,       saveImputationLog = FALSE,       saveDeconvolutionLog = FALSE,       saveImputedStep=FALSE)  dim(seur)"},{"path":"https://mkarikom.github.io/DURIAN/articles/signaling.html","id":"construct-the-cellchat-object","dir":"Articles","previous_headings":"","what":"Construct the CellChat Object","title":"Imputation/Signaling from Seurat Output","text":"Comparing two datasets CellChat requires unique names cell. Thus, label Seurat assay (RNA IMPUTED) prepended cell ID creation individual CellChat objects, prior merging . full documentation CellChat-specific steps , please refer corresponding CellChat tutorial.","code":"library(CellChat)  # CellChat Raw Object CellChatDB = CellChatDB.human data = normalizeData(as.matrix(GetAssayData(seur,assay=\"RNA\",slot = \"counts\"))) colnames(data) = paste0(\"RNA.\",colnames(data)) meta = seur@meta.data[,c(\"cellType\",\"sampleID\")] rownames(meta) = colnames(data) meta$sampleID = colnames(data) cellchat <- createCellChat(object = data, meta = meta, group.by = \"cellType\") cellchat@DB <- CellChatDB  # Raw Object Processing cellchat <- subsetData(cellchat) cellchat <- identifyOverExpressedGenes(cellchat) cellchat <- identifyOverExpressedInteractions(cellchat)  # Raw Object Individual Probs cellchat <- computeCommunProb(cellchat,raw.use = TRUE) cellchat <- computeCommunProbPathway(cellchat) cellchat <- aggregateNet(cellchat) cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = \"netP\")  # CellChat Imputed Object data = normalizeData(as.matrix(GetAssayData(seur,assay=\"IMPUTED\",slot = \"counts\"))) colnames(data) = paste0(\"IMPUTED.\",colnames(data)) meta = seur@meta.data[,c(\"cellType\",\"sampleID\")] rownames(meta) = colnames(data) meta$sampleID = colnames(data) cellchat_imputed <- createCellChat(object = data, meta = meta, group.by = \"cellType\") cellchat_imputed@DB <- CellChatDB  # Imputed Object Processing cellchat_imputed <- subsetData(cellchat_imputed) cellchat_imputed <- identifyOverExpressedGenes(cellchat_imputed) cellchat_imputed <- identifyOverExpressedInteractions(cellchat_imputed)  # Imputed Object Individual Probs cellchat_imputed <- computeCommunProb(cellchat_imputed,raw.use = TRUE) cellchat_imputed <- computeCommunProbPathway(cellchat_imputed) cellchat_imputed <- aggregateNet(cellchat_imputed) cellchat_imputed <- netAnalysis_computeCentrality(cellchat_imputed, slot.name = \"netP\")  cellchats_list = list() cellchats_list[[\"orig\"]] = cellchat cellchats_list[[\"imputed\"]] = cellchat_imputed merged = mergeCellChat(cellchats_list, add.names = names(cellchats_list),cell.prefix=TRUE)"},{"path":"https://mkarikom.github.io/DURIAN/articles/signaling.html","id":"the-impact-of-imputation-on-number-of-interactions-between-cell-types","dir":"Articles","previous_headings":"","what":"The Impact of Imputation on Number of Interactions Between Cell Types","title":"Imputation/Signaling from Seurat Output","text":"impact imputation generally data-dependent asymmetric across pathways. Changes number interactions cell types shows dropout also cell type specific. full documentation CellChat-specific steps , please refer corresponding CellChat tutorial.","code":"netVisual_heatmap(merged) #> Do heatmap based on a merged object"},{"path":"https://mkarikom.github.io/DURIAN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Karikomi. Maintainer.","code":""},{"path":"https://mkarikom.github.io/DURIAN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Karikomi M (2022). DURIAN: Deconvolution Multitask Regression-Based Imputation. https://github.com/mkarikom/DURIAN, https://mkarikom.github.io/DURIAN/.","code":"@Manual{,   title = {DURIAN: Deconvolution and Multitask Regression-Based Imputation},   author = {Matt Karikomi},   year = {2022},   note = {https://github.com/mkarikom/DURIAN, https://mkarikom.github.io/DURIAN/}, }"},{"path":"https://mkarikom.github.io/DURIAN/index.html","id":"durian-","dir":"","previous_headings":"","what":"Deconvolution and Multitask Regression-Based Imputation","title":"Deconvolution and Multitask Regression-Based Imputation","text":"DURIAN (Deconvolution mUltitask-Regression-based ImputAtioN) hybrid, iterative method imputation drop-single-cell expression data. Automatic recovery missing single-cell reads supervised deconvoluted bulk expression data. examples pipelines involving DURIAN, users consult scripts used generate benchmarking figures paper.","code":""},{"path":"https://mkarikom.github.io/DURIAN/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get Started","title":"Deconvolution and Multitask Regression-Based Imputation","text":"Installation: see Basic usage DURIAN running visualizing imputation Human single-cell data vignette(\"basic_usage\"). Selection DURIAN deconvolution module, including R/C++ Julia-based modules vignette(\"module_selection\"). Use DURIAN Seurat objects directly, perform cell signaling analysis CellChat vignette(\"signaling\").","code":""},{"path":[]},{"path":"https://mkarikom.github.io/DURIAN/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"Deconvolution and Multitask Regression-Based Imputation","text":"","code":"ENV[\"JULIA_PROJECT\"]=pwd() ENV[\"R_HOME\"]=\"/usr/local/lib/R\" using Pkg Pkg.add(\"Distributed\") Pkg.add(\"RCall\") Pkg.build(\"RCall\") using RCall  Pkg.add(url=\"https://github.com/mkarikom/DistributedStwdLDA.jl.git\") # Install the latest version and dependencies from github library(devtools) devtools::install_github(\"mkarikom/MuSiC@biobaseImport\") devtools::install_github(\"mkarikom/mtSCRABBLE\") install.packages(\"foreach\")  Sys.setenv(JULIA_HOME=\"/usr/local/julia-1.6.6/bin\")  install.packages(\"JuliaCall\") library(JuliaCall) julia_setup(JULIA_HOME = Sys.getenv(\"JULIA_HOME\"),verbose=TRUE,rebuild = TRUE,install=FALSE)"},{"path":"https://mkarikom.github.io/DURIAN/index.html","id":"package","dir":"","previous_headings":"Installation","what":"Package","title":"Deconvolution and Multitask Regression-Based Imputation","text":"","code":"install_github(\"mkarikom/DURIAN\")"},{"path":"https://mkarikom.github.io/DURIAN/reference/B.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk sequencing of normal skin from human atopic dermatitis patients — B","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — B","text":"Normal skin tissue 20 patients.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — B","text":"","code":"B"},{"path":"https://mkarikom.github.io/DURIAN/reference/B.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — B","text":"data frame 6000 genes 20 donors:","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/B.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — B","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE65832","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/C.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-cell sequencing of normal skin from human atopic dermatitis patients — C","title":"Single-cell sequencing of normal skin from human atopic dermatitis patients — C","text":"Approximately 500 cells, randomly sub-sampled data.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single-cell sequencing of normal skin from human atopic dermatitis patients — C","text":"","code":"C"},{"path":"https://mkarikom.github.io/DURIAN/reference/C.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Single-cell sequencing of normal skin from human atopic dermatitis patients — C","text":"data frame 5991 genes 472 cells:","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/C.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Single-cell sequencing of normal skin from human atopic dermatitis patients — C","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE147424","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/T.html","id":null,"dir":"Reference","previous_headings":"","what":"Bulk sequencing of normal skin from human atopic dermatitis patients — T","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — T","text":"Normal skin tissue 20 patients.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — T","text":"","code":"T"},{"path":"https://mkarikom.github.io/DURIAN/reference/T.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — T","text":"data frame 6000 genes 20 donors:","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/T.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bulk sequencing of normal skin from human atopic dermatitis patients — T","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE65832","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/getdroprate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the differential sparsity of the observed vs original — getdroprate","title":"Get the differential sparsity of the observed vs original — getdroprate","text":"Get differential sparsity observed vs original","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/getdroprate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the differential sparsity of the observed vs original — getdroprate","text":"","code":"getdroprate(obs, orig)"},{"path":"https://mkarikom.github.io/DURIAN/reference/getmetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get benchmark metrics — getmetrics","title":"Get benchmark metrics — getmetrics","text":"Get benchmark metrics","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/getmetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get benchmark metrics — getmetrics","text":"","code":"getmetrics(obs.orig, true.orig, useIrlba = TRUE)"},{"path":"https://mkarikom.github.io/DURIAN/reference/pDataC.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal skin from human atopic dermatitis patients — pDataC","title":"Normal skin from human atopic dermatitis patients — pDataC","text":"Labels corresponding re-clustered cells dataset `C`, following DESeq2-based differential marker-selection based disease, given bulk/pseudobulk modality bulk data normal disease tissue samples Suarez-Farinas 2015 et. al. pseudobulk data normal disease cells 2020 et. al..  Differentially-expressed genes selected based adjusted p-value <= 1e-2.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/pDataC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal skin from human atopic dermatitis patients — pDataC","text":"","code":"pDataC"},{"path":"https://mkarikom.github.io/DURIAN/reference/pDataC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Normal skin from human atopic dermatitis patients — pDataC","text":"data frame 5991 genes 472 cells:","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/pDataC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Normal skin from human atopic dermatitis patients — pDataC","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE147424","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_durian.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DURIAN on input data — run_durian","title":"Run DURIAN on input data — run_durian","text":"Run DURIAN input data","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_durian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DURIAN on input data — run_durian","text":"","code":"run_durian(   path = NULL,   scrabble_parameters = c(1, 1e-06, 1e-04),   nIter_outer = 20,   nIter_inner = 20,   nSDCIters = 10000,   emDiag = FALSE,   nEM = 10,   error_out_threshold = 1e-07,   error_inner_threshold = 1e-05,   C_fn = NULL,   T_fn = NULL,   pDataC_fn = NULL,   scdata = NULL,   bulkdata = NULL,   metadata = NULL,   seur = NULL,   deconv_method = \"dsLDA\",   MCNITER = 5000,   MCNPARTITIONS = 5,   MCNCHAINS = 2,   MCBLOCKSIZE = 5,   MCPLOT = TRUE,   LDAPHILATENT = 2,   LDABETAPSEUDO = 0,   LDABETAEPS = 0,   LDAALPHA = 0.1,   LDANSCTHRESH = 3,   SCRNSCTHRESH = 3,   DECONVGENETHRESH = 0.01,   SCRGENETHRESH = 0.3,   MINCELLSTOPICCORP = 5,   SCRSCALESC = \"ident\",   SCRSCALEFACSC = 10000,   LDASCALESC = \"ident\",   LDASCALEBLK = \"ident\",   LDASCALEFACSC = 1,   LDASCALEFACBLK = 10000,   LDAINITFLAVOR = \"unif\",   LDARUNQC = FALSE,   LDAVERBOSE = FALSE,   MCTHINNING = 5,   MCRMCHAINS = TRUE,   MCBURNRATE = 0.25,   deconvbenchmark = NULL,   imputebenchmark = NULL,   protectedgenes = c(\"dummygene\"),   maxT = 0,   initscrabble = FALSE,   allScr = TRUE,   limrhat = 10,   durianEps = 1e-06,   saveDeconvolutionLog = FALSE,   saveImputedStep = FALSE,   saveImputationLog = TRUE,   outerStats = FALSE,   useIrlba = TRUE,   runstability = FALSE )"},{"path":"https://mkarikom.github.io/DURIAN/reference/run_durian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run DURIAN on input data — run_durian","text":"path path input data provided object. scrabble_parameters ADMM parameters","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_durian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run DURIAN on input data — run_durian","text":"imputed data.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble.html","id":null,"dir":"Reference","previous_headings":"","what":"Run original SCRABBLE — run_scrabble","title":"Run original SCRABBLE — run_scrabble","text":"Run original SCRABBLE","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run original SCRABBLE — run_scrabble","text":"","code":"run_scrabble(   path,   scrabble_parameters = c(1, 1e-06, 1e-04),   nIter_outer = 20,   nIter_inner = 20,   nSDCIters = 10000,   C_fn = \"ldaC.csv.gz\",   T_fn = \"B.csv.gz\",   scdata = NULL,   bulkdata = NULL,   scrcellids = NULL,   scrgeneids = NULL,   imputebenchmark = NULL,   allScr = TRUE,   error_out_threshold = 1e-07,   error_inner_threshold = 1e-05,   outerStats = FALSE,   metadata = NULL,   useIrlba = TRUE,   runstability = FALSE )"},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run original SCRABBLE — run_scrabble","text":"path path input data provided object. scrabble_parameters ADMM parameters","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run original SCRABBLE — run_scrabble","text":"imputed data.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Run multitask SCRABBLE (positive control) — run_scrabble_m","title":"Run multitask SCRABBLE (positive control) — run_scrabble_m","text":"Run multitask SCRABBLE (positive control)","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run multitask SCRABBLE (positive control) — run_scrabble_m","text":"","code":"run_scrabble_m(   path,   scrabble_parameters = c(1, 1e-06, 1e-04),   nIter_outer = 20,   nIter_inner = 20,   nSDCIters = 10000,   C_fn = \"ldaC.csv\",   T_fn = \"B.csv\",   pDataC_fn = \"pDataC.csv\",   scdata = NULL,   bulkdata = NULL,   metadata = NULL,   thetahat = NULL,   imputebenchmark = NULL,   scrcellids = NULL,   scrgeneids = NULL,   allScr = TRUE,   error_out_threshold = 1e-07,   error_inner_threshold = 1e-05,   outerStats = FALSE,   useIrlba = TRUE,   runstability = FALSE )"},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run multitask SCRABBLE (positive control) — run_scrabble_m","text":"path path input data provided object. scrabble_parameters ADMM parameters","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/run_scrabble_m.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run multitask SCRABBLE (positive control) — run_scrabble_m","text":"imputed data.","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/scremoutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outlier cells by library size — scremoutlier","title":"Remove outlier cells by library size — scremoutlier","text":"Remove outlier cells library size","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/scremoutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outlier cells by library size — scremoutlier","text":"","code":"scremoutlier(data, nsd = 3)"},{"path":"https://mkarikom.github.io/DURIAN/reference/subsetsc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the cell and gene ids corresponding to gene expressed in at least `generate * ncells` cells and for those genes, the cells that have nonzero total expression — subsetsc","title":"Get the cell and gene ids corresponding to gene expressed in at least `generate * ncells` cells and for those genes, the cells that have nonzero total expression — subsetsc","text":"Get cell gene ids corresponding gene expressed least `generate * ncells` cells genes, cells nonzero total expression","code":""},{"path":"https://mkarikom.github.io/DURIAN/reference/subsetsc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the cell and gene ids corresponding to gene expressed in at least `generate * ncells` cells and for those genes, the cells that have nonzero total expression — subsetsc","text":"","code":"subsetsc(   x = NULL,   generate = 0.05,   geneids = NULL,   return_obj = FALSE,   nsd = NULL )"}]
